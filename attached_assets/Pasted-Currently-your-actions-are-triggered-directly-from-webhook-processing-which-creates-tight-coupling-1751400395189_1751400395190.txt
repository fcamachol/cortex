Currently, your actions are triggered directly from webhook processing, which creates tight coupling and limits flexibility. Let me show you how to revise this to a proper event-driven architecture where database changes trigger actions, not webhooks.
The Problem with Current Architecture
Current Flow:
Webhook → Process → Store → Trigger Action (all synchronous)

Better Flow:
Webhook → Process → Store → DB Event → Action Processor (decoupled)
Revised Architecture Implementation
Step 1: Add Database Change Tracking
First, create the infrastructure to track database changes:
sql-- Table to track all changes that might trigger actions
CREATE TABLE entity_changes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  table_name TEXT NOT NULL,
  operation TEXT NOT NULL CHECK (operation IN ('INSERT', 'UPDATE', 'DELETE')),
  entity_id TEXT NOT NULL,
  entity_type TEXT, -- 'reaction', 'message', 'task', etc.
  old_data JSONB,
  new_data JSONB,
  metadata JSONB, -- Additional context like user_id, chat_id
  changed_at TIMESTAMP DEFAULT NOW(),
  processed BOOLEAN DEFAULT FALSE,
  processed_at TIMESTAMP,
  error_count INTEGER DEFAULT 0,
  last_error TEXT
);

-- Indexes for efficient processing
CREATE INDEX idx_entity_changes_unprocessed 
  ON entity_changes(processed, changed_at) 
  WHERE processed = FALSE;

CREATE INDEX idx_entity_changes_type 
  ON entity_changes(entity_type, processed);

-- Create a function to capture changes
CREATE OR REPLACE FUNCTION capture_entity_change() 
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO entity_changes (
    table_name,
    operation,
    entity_id,
    entity_type,
    old_data,
    new_data,
    metadata
  ) VALUES (
    TG_TABLE_NAME,
    TG_OP,
    CASE 
      WHEN TG_OP = 'DELETE' THEN OLD.id::TEXT
      ELSE NEW.id::TEXT
    END,
    CASE 
      WHEN TG_TABLE_NAME = 'whatsapp_message_reactions' THEN 'reaction'
      WHEN TG_TABLE_NAME = 'whatsapp_messages' THEN 'message'
      WHEN TG_TABLE_NAME = 'tasks' THEN 'task'
      ELSE TG_TABLE_NAME
    END,
    CASE WHEN TG_OP != 'INSERT' THEN to_jsonb(OLD) ELSE NULL END,
    CASE WHEN TG_OP != 'DELETE' THEN to_jsonb(NEW) ELSE NULL END,
    CASE 
      WHEN TG_OP != 'DELETE' THEN 
        jsonb_build_object(
          'user_id', NEW.user_id,
          'chat_id', COALESCE(NEW.chat_id, NEW.room_id),
          'timestamp', NOW()
        )
      ELSE NULL
    END
  );
  
  -- Notify for real-time processing
  PERFORM pg_notify(
    'entity_change',
    json_build_object(
      'table', TG_TABLE_NAME,
      'operation', TG_OP,
      'entity_type', CASE 
        WHEN TG_TABLE_NAME = 'whatsapp_message_reactions' THEN 'reaction'
        ELSE TG_TABLE_NAME
      END
    )::text
  );
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply triggers to relevant tables
CREATE TRIGGER track_reaction_changes
  AFTER INSERT OR UPDATE OR DELETE ON whatsapp_message_reactions
  FOR EACH ROW EXECUTE FUNCTION capture_entity_change();

CREATE TRIGGER track_message_changes
  AFTER INSERT ON whatsapp_messages
  FOR EACH ROW EXECUTE FUNCTION capture_entity_change();

-- Optional: Track task creation for chain reactions
CREATE TRIGGER track_task_changes
  AFTER INSERT ON cortex_projects.tasks
  FOR EACH ROW EXECUTE FUNCTION capture_entity_change();
Step 2: Revise Your WhatsApp API Adapter
Remove action triggering from webhook processing:
typescript// src/adapters/WhatsAppAPIAdapter.ts

export class WhatsAppAPIAdapter {
  async processWebhook(payload: any) {
    // Your existing processing logic
    switch (payload.event) {
      case 'messages.reaction':
        await this.handleReaction(payload);
        break;
      // ... other cases
    }
  }
  
  async handleReaction(reactionData: any) {
    // Just store the reaction - NO ACTION TRIGGERING
    const reaction = await this.upsertWhatsappMessageReaction({
      id: reactionData.key,
      message_id: reactionData.message_id,
      reaction: reactionData.reaction,
      user_id: reactionData.from,
      // ... other fields
    });
    
    // REMOVE these lines:
    // await this.actionService.triggerSimpleAction(reaction);
    // await this.actionService.processReaction(reaction);
    
    // The database trigger will handle it now!
    return reaction;
  }
}
Step 3: Create New Action Processor Service
This service watches for database changes and triggers actions:
typescript// src/services/DatabaseActionProcessor.ts

import { EventEmitter } from 'events';
import { db } from '../db';
import { ActionService } from './ActionService';

export class DatabaseActionProcessor extends EventEmitter {
  private actionService: ActionService;
  private isProcessing = false;
  private processingInterval: NodeJS.Timer;
  
  constructor() {
    super();
    this.actionService = new ActionService();
  }
  
  async start() {
    console.log('Starting Database Action Processor...');
    
    // Process changes every 500ms for near real-time response
    this.processingInterval = setInterval(() => {
      if (!this.isProcessing) {
        this.processChangeBatch();
      }
    }, 500);
    
    // Also listen for PostgreSQL notifications
    await this.setupRealtimeListener();
  }
  
  async stop() {
    if (this.processingInterval) {
      clearInterval(this.processingInterval);
    }
  }
  
  private async processChangeBatch() {
    this.isProcessing = true;
    
    try {
      // Get unprocessed changes
      const changes = await db.query(`
        SELECT * FROM entity_changes 
        WHERE processed = FALSE 
        AND error_count < 3
        ORDER BY changed_at 
        LIMIT 20
        FOR UPDATE SKIP LOCKED
      `);
      
      for (const change of changes.rows) {
        await this.processChange(change);
      }
    } catch (error) {
      console.error('Error processing change batch:', error);
    } finally {
      this.isProcessing = false;
    }
  }
  
  private async processChange(change: any) {
    try {
      console.log(`Processing ${change.entity_type} change:`, change.id);
      
      switch (change.entity_type) {
        case 'reaction':
          await this.handleReactionChange(change);
          break;
          
        case 'message':
          await this.handleMessageChange(change);
          break;
          
        case 'task':
          // Could trigger follow-up actions
          await this.handleTaskChange(change);
          break;
      }
      
      // Mark as processed
      await db.query(`
        UPDATE entity_changes 
        SET processed = TRUE, processed_at = NOW() 
        WHERE id = $1
      `, [change.id]);
      
      this.emit('change:processed', change);
      
    } catch (error) {
      console.error(`Error processing change ${change.id}:`, error);
      
      // Update error count
      await db.query(`
        UPDATE entity_changes 
        SET error_count = error_count + 1, 
            last_error = $2 
        WHERE id = $1
      `, [change.id, error.message]);
      
      this.emit('change:error', { change, error });
    }
  }
  
  private async handleReactionChange(change: any) {
    if (change.operation !== 'INSERT') return;
    
    const reaction = change.new_data;
    
    // Use your existing action service logic
    await this.actionService.triggerSimpleAction({
      id: reaction.id,
      message_id: reaction.message_id,
      reaction: reaction.reaction,
      user_id: reaction.user_id,
      chat_id: reaction.chat_id,
      created_at: reaction.created_at
    });
  }
  
  private async handleMessageChange(change: any) {
    if (change.operation !== 'INSERT') return;
    
    const message = change.new_data;
    
    // Example: Auto-respond to certain keywords
    if (message.content?.toLowerCase().includes('help')) {
      // Trigger help action
      await this.actionService.executeAction({
        type: 'send_help_message',
        data: { chat_id: message.chat_id, user_id: message.user_id }
      });
    }
  }
  
  private async handleTaskChange(change: any) {
    // Example: Send notification when task is created
    if (change.operation === 'INSERT') {
      const task = change.new_data;
      // Your notification logic
    }
  }
  
  private async setupRealtimeListener() {
    const client = await db.getClient();
    await client.query('LISTEN entity_change');
    
    client.on('notification', (msg) => {
      console.log('Database change notification:', msg.payload);
      // Immediately process when notified
      if (!this.isProcessing) {
        this.processChangeBatch();
      }
    });
  }
}
Step 4: Update Your ActionService
Keep your ActionService mostly the same, but add better logging:
typescript// src/services/ActionService.ts

export class ActionService {
  async triggerSimpleAction(reaction: any) {
    console.log(`[ActionService] Processing reaction: ${reaction.reaction} from ${reaction.user_id}`);
    
    // Your existing logic remains the same
    const matchingRules = await db.query(`
      SELECT * FROM "actionRules" 
      WHERE rule_type = 'simple_action' 
      AND config->>'trigger_emoji' = $1
      AND active = true
    `, [reaction.reaction]);
    
    for (const rule of matchingRules.rows) {
      await this.executeSimpleAction(rule, reaction);
    }
  }
  
  async executeSimpleAction(rule: any, context: any) {
    console.log(`[ActionService] Executing action: ${rule.config.action_type}`);
    
    // Your existing execution logic
    switch (rule.config.action_type) {
      case 'create_task':
        await this.createTaskAction(rule, context);
        break;
      // ... other action types
    }
  }
}
Step 5: Integration Changes
Update your application initialization:
typescript// src/app.ts or index.ts

import { DatabaseActionProcessor } from './services/DatabaseActionProcessor';

// In your app initialization
const actionProcessor = new DatabaseActionProcessor();

// Start the processor
await actionProcessor.start();

// Optional: Listen to events
actionProcessor.on('change:processed', (change) => {
  console.log('Processed change:', change.id);
});

actionProcessor.on('change:error', ({ change, error }) => {
  console.error('Failed to process change:', change.id, error);
  // Could send to error tracking service
});

// Graceful shutdown
process.on('SIGTERM', async () => {
  await actionProcessor.stop();
  process.exit(0);
});
Step 6: Add Monitoring and Management Tools
Create helpful views and functions:
sql-- Dashboard view for monitoring
CREATE VIEW action_processing_dashboard AS
SELECT 
  entity_type,
  COUNT(*) FILTER (WHERE processed = FALSE) as pending,
  COUNT(*) FILTER (WHERE processed = TRUE AND DATE(changed_at) = CURRENT_DATE) as processed_today,
  COUNT(*) FILTER (WHERE error_count > 0) as failed,
  MAX(changed_at) FILTER (WHERE processed = TRUE) as last_processed_at,
  AVG(EXTRACT(EPOCH FROM (processed_at - changed_at))) FILTER (WHERE processed = TRUE) as avg_processing_seconds
FROM entity_changes
GROUP BY entity_type;

-- Function to reprocess failed actions
CREATE OR REPLACE FUNCTION reprocess_failed_actions(
  p_entity_type TEXT DEFAULT NULL,
  p_max_errors INT DEFAULT 3
) RETURNS TABLE (requeued_count INT) AS $$
BEGIN
  UPDATE entity_changes
  SET processed = FALSE, error_count = 0
  WHERE processed = TRUE 
  AND error_count >= p_max_errors
  AND (p_entity_type IS NULL OR entity_type = p_entity_type);
  
  RETURN QUERY SELECT COUNT(*)::INT FROM entity_changes WHERE processed = FALSE;
END;
$$ LANGUAGE plpgsql;

-- Recent action history
CREATE VIEW recent_action_history AS
SELECT 
  ec.id,
  ec.entity_type,
  ec.operation,
  ec.changed_at,
  ec.processed,
  ec.processed_at,
  EXTRACT(EPOCH FROM (ec.processed_at - ec.changed_at)) as processing_delay_seconds,
  ec.error_count,
  ec.last_error,
  CASE 
    WHEN ec.entity_type = 'reaction' THEN ec.new_data->>'reaction'
    WHEN ec.entity_type = 'message' THEN LEFT(ec.new_data->>'content', 50)
    ELSE NULL
  END as preview
FROM entity_changes ec
WHERE ec.changed_at > NOW() - INTERVAL '24 hours'
ORDER BY ec.changed_at DESC;
Step 7: Testing the New Architecture
Create a test script:
typescript// src/scripts/testDatabaseActions.ts

async function testDatabaseActions() {
  console.log('Testing database-driven actions...');
  
  // 1. Insert a test reaction directly
  const testReaction = await db.query(`
    INSERT INTO whatsapp_message_reactions 
    (id, message_id, reaction, user_id, chat_id) 
    VALUES ($1, $2, $3, $4, $5)
    RETURNING *
  `, [
    `test-${Date.now()}`,
    'msg-123',
    '✅', // Should trigger your existing rules
    'test-user',
    'test-chat'
  ]);
  
  console.log('Created test reaction:', testReaction.rows[0].id);
  
  // 2. Verify change was captured
  await new Promise(resolve => setTimeout(resolve, 100));
  
  const changes = await db.query(`
    SELECT * FROM entity_changes 
    WHERE entity_id = $1
  `, [testReaction.rows[0].id]);
  
  console.log('Change captured:', changes.rows.length > 0 ? '✓' : '✗');
  
  // 3. Wait for processing
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // 4. Check if processed
  const processed = await db.query(`
    SELECT * FROM entity_changes 
    WHERE entity_id = $1 AND processed = TRUE
  `, [testReaction.rows[0].id]);
  
  console.log('Change processed:', processed.rows.length > 0 ? '✓' : '✗');
  
  // 5. Verify task was created
  const tasks = await db.query(`
    SELECT * FROM cortex_projects.tasks 
    WHERE created_at > NOW() - INTERVAL '1 minute'
    ORDER BY created_at DESC
    LIMIT 1
  `);
  
  console.log('Task created:', tasks.rows.length > 0 ? '✓' : '✗');
}
Migration Path

Phase 1: Deploy database changes (tables, triggers)
Phase 2: Deploy DatabaseActionProcessor alongside existing code
Phase 3: Remove triggerSimpleAction calls from webhook processing
Phase 4: Monitor and optimize

Benefits of This Architecture

Decoupling: Webhooks don't know about actions
Reliability: Failed actions can be retried
Flexibility: Easy to add new triggers (messages, status updates)
Auditability: Complete history of all changes and actions
Scalability: Can run multiple processors
Extensibility: Can trigger actions from ANY database change