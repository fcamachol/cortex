import { storage } from './storage'; // Your database access layer
import { SseManager } from './sse-manager'; // Your real-time notification manager
import { ActionService } from './action-service'; // Your business logic engine
import {
    // Import all necessary types from your single schema definition file
    type WhatsappMessage, type InsertWhatsappMessage,
    type WhatsappContact, type InsertWhatsappContact,
    type WhatsappChat, type InsertWhatsappChat,
    type WhatsappGroup, type InsertWhatsappGroup,
    type WhatsappGroupParticipant, type InsertWhatsappGroupParticipant,
    type WhatsappMessageReaction, type InsertWhatsappMessageReaction,
    type WhatsappCallLog, type InsertWhatsappCallLog,
    type WhatsappMessageUpdate
} from '@shared/schema';

/**
 * @class WebhookApiAdapter
 * @description The "Translator" layer. Its only job is to take raw API payloads,
 * map them into clean internal data objects, and then command the storage layer
 * in the correct order to prevent data integrity errors.
 */
export const WebhookApiAdapter = {

    /**
     * Main entry point for all webhook events.
     */
    async processIncomingEvent(instanceId: string, event: any): Promise<void> {
        const eventType = event.event?.toLowerCase(); // Normalize event type
        const { data, sender } = event;
        
        if (!eventType) {
            console.warn(`[${instanceId}] Received webhook with no event type. Discarding.`);
            return;
        }

        console.log(`üì® [${instanceId}] Translating event: ${eventType}`);

        switch (eventType) {
            case 'messages.upsert':
                await this.handleMessageUpsert(instanceId, data, sender);
                break;
            case 'messages.update':
                await this.handleMessageUpdate(instanceId, data, sender);
                break;
            case 'contacts.upsert':
            case 'contacts.update':
                await this.handleContactsUpsert(instanceId, data);
                break;
            case 'chats.upsert':
            case 'chats.update':
                await this.handleChatsUpsert(instanceId, data);
                break;
            case 'groups.upsert':
            case 'groups.update':
                await this.handleGroupsUpsert(instanceId, data);
                break;
            case 'group.participants.update':
                await this.handleGroupParticipantsUpdate(instanceId, data);
                break;
            case 'call':
                await this.handleCall(instanceId, data);
                break;
            // Add other event handlers here...
            default:
                console.log(`- Unhandled event type in adapter: ${eventType}`);
        }
    },

    /**
     * Handles reaction events specifically.
     */
    async handleReaction(instanceId: string, rawReaction: any, sender?: string): Promise<void> {
        try {
            const cleanReaction = await this.mapApiPayloadToWhatsappReaction(rawReaction, instanceId, sender);
            if (!cleanReaction) return;

            await storage.upsertWhatsappReaction(cleanReaction);
            console.log(`‚úÖ [${instanceId}] Reaction stored: ${cleanReaction.reaction_emoji} on ${cleanReaction.message_id}`);
            
            SseManager.notifyClientsOfNewReaction(cleanReaction);
            ActionService.processReaction(cleanReaction);
        } catch (error) {
            console.error(`‚ùå Error processing reaction:`, error);
        }
    },

    /**
     * Handles new messages with a robust, sequential process.
     */
    async handleMessageUpsert(instanceId: string, data: any, sender?: string): Promise<void> {
        const messages = Array.isArray(data.messages) ? data.messages : [data];
        if (!messages[0]?.key) return;

        for (const rawMessage of messages) {
            try {
                // Check if it's a reaction message and route it
                if (rawMessage.message?.reactionMessage) {
                    await this.handleReaction(instanceId, rawMessage, sender);
                    continue; // Stop further processing for this item
                }

                const cleanMessage = await this.mapApiPayloadToWhatsappMessage(rawMessage, instanceId);
                if (!cleanMessage) continue;

                await this.ensureDependenciesForMessage(cleanMessage, rawMessage);
                
                const storedMessage = await storage.upsertWhatsappMessage(cleanMessage);
                console.log(`‚úÖ [${instanceId}] Message stored: ${storedMessage.message_id}`);
                
                SseManager.notifyClientsOfNewMessage(storedMessage);
                ActionService.processNewMessage(storedMessage);
            } catch (error) {
                console.error(`‚ùå Error processing message upsert for ${rawMessage.key?.id}:`, error);
            }
        }
    },
    
    async handleMessageUpdate(instanceId: string, data: any, sender?: string): Promise<void> {
        if (!data || !Array.isArray(data.updates)) return;
        for (const update of data.updates) {
             const messageId = update.key?.id;
             const status = this.mapMessageStatus(update.status);
             if (messageId && status) {
                 await storage.createWhatsappMessageUpdate({
                     message_id: messageId,
                     instance_id: instanceId,
                     status: status,
                     timestamp: new Date()
                 });
                 console.log(`‚úÖ [${instanceId}] Logged message status: ${messageId} -> ${status}`);
             }
        }
    },

    async handleContactsUpsert(instanceId: string, data: any): Promise<void> {
        const contacts = Array.isArray(data.contacts) ? data.contacts : Array.isArray(data) ? data : [data];
        if (!contacts || contacts.length === 0) return;

        for (const rawContact of contacts) {
            const cleanContact = await this.mapApiPayloadToWhatsappContact(rawContact, instanceId);
            if (cleanContact) {
                await storage.upsertWhatsappContact(cleanContact);
            }
        }
    },

    async handleChatsUpsert(instanceId: string, data: any): Promise<void> {
        const chats = Array.isArray(data.chats) ? data.chats : Array.isArray(data) ? data : [data];
        if (!chats || chats.length === 0) return;
        
        for (const rawChat of chats) {
            const cleanChat = this.mapApiPayloadToWhatsappChat(rawChat, instanceId);
            if (cleanChat) {
                await this.ensureDependenciesForChat(cleanChat, rawChat);
                await storage.upsertWhatsappChat(cleanChat);
            }
        }
    },

    async handleGroupsUpsert(instanceId: string, data: any[]): Promise<void> {
        if (!Array.isArray(data)) return;
        for (const rawGroup of data) {
            const cleanGroup = this.mapApiPayloadToWhatsappGroup(rawGroup, instanceId);
            if (cleanGroup) {
                await this.ensureDependenciesForChat({ type: 'group', chat_id: cleanGroup.group_jid }, rawGroup);
                await storage.upsertWhatsappGroup(cleanGroup);
                console.log(`‚úÖ [${instanceId}] Group upserted with subject: ${cleanGroup.subject}`);
            }
        }
    },
    
    async handleGroupParticipantsUpdate(instanceId: string, data: any): Promise<void> {
        // ... (implementation from previous version) ...
    },
    
    async handleCall(instanceId: string, data: any[]): Promise<void> {
        // ... (implementation from previous version) ...
    },

    async ensureDependenciesForMessage(cleanMessage: InsertWhatsappMessage, rawMessage: any): Promise<void> {
        const senderContact = await this.mapApiPayloadToWhatsappContact({ id: cleanMessage.sender_jid, pushName: rawMessage.pushName }, cleanMessage.instance_id);
        if (senderContact) await storage.upsertWhatsappContact(senderContact);

        await this.ensureDependenciesForChat({ type: cleanMessage.chat_id.endsWith('@g.us') ? 'group' : 'individual', chat_id: cleanMessage.chat_id }, {});
    },

    async ensureDependenciesForChat(cleanChat: Partial<WhatsappChat>, rawChat: any): Promise<void> {
        const chatContact = await this.mapApiPayloadToWhatsappContact({ id: cleanChat.chat_id }, cleanChat.instance_id);
        if (chatContact) await storage.upsertWhatsappContact(chatContact);

        if (cleanChat.type === 'group') {
            await storage.createGroupPlaceholderIfNeeded(cleanChat.chat_id!, cleanChat.instance_id!);
        }
    },

    // --- Data Mapping Functions ---

    async mapApiPayloadToWhatsappReaction(rawReaction: any, instanceId: string, sender?: string): Promise<Omit<InsertWhatsappMessageReaction, 'reaction_id'> | null> {
        const reactionMsg = rawReaction.message?.reactionMessage;
        if (!reactionMsg?.key?.id) return null;
        
        const reactorJid = rawReaction.key?.participant || sender || rawReaction.key?.remoteJid;
        
        const timestampMs = reactionMsg.senderTimestampMs;
        const validTimestamp = (timestampMs && typeof timestampMs === 'number' && !isNaN(timestampMs) && timestampMs > 0)
            ? new Date(timestampMs)
            : new Date();

        return {
            message_id: reactionMsg.key.id,
            instance_id: instanceId,
            reactor_jid: reactorJid,
            reaction_emoji: reactionMsg.text || '',
            from_me: rawReaction.key.fromMe || false,
            timestamp: validTimestamp
        };
    },
    
    async mapApiPayloadToWhatsappMessage(rawMessage: any, instanceId: string): Promise<InsertWhatsappMessage | null> {
        // ... (implementation from previous version, returning full Insert type) ...
        return null; // Placeholder
    },

    async mapApiPayloadToWhatsappContact(rawContact: any, instanceId: string): Promise<InsertWhatsappContact | null> {
        const jid = rawContact.id || rawContact.remoteJid;
        if (!jid) return null;

        const instance = await storage.getInstanceById(instanceId);
        
        return {
            jid: jid,
            instance_id: instanceId,
            push_name: rawContact.name || rawContact.pushName || rawContact.notify,
            verified_name: rawContact.verifiedName,
            profile_picture_url: rawContact.profilePicUrl || rawContact.profilePictureUrl,
            is_business: rawContact.isBusiness || false,
            is_me: instance?.owner_jid === jid,
            is_blocked: rawContact.isBlocked || false,
        };
    },
    
    mapApiPayloadToWhatsappChat(rawChat: any, instanceId: string): InsertWhatsappChat | null {
        const chatId = rawChat.id || rawChat.remoteJid;
        if (!chatId || typeof chatId !== 'string' || chatId.trim() === '') return null;
        
        return {
            chat_id: chatId,
            instance_id: instanceId,
            type: chatId.endsWith('@g.us') ? 'group' : 'individual',
            unread_count: rawChat.unreadCount || 0,
            is_archived: rawChat.archived || false,
            is_pinned: rawChat.pinned || false,
            is_muted: rawChat.muteEndTime ? new Date(rawChat.muteEndTime * 1000) > new Date() : false,
            mute_end_timestamp: rawChat.muteEndTime ? new Date(rawChat.muteEndTime * 1000) : undefined,
            last_message_timestamp: rawChat.conversationTimestamp ? new Date(rawChat.conversationTimestamp * 1000) : undefined,
        };
    },

    mapApiPayloadToWhatsappGroup(rawGroup: any, instanceId: string): InsertWhatsappGroup | null {
        if (!rawGroup.id) return null;
        return {
            group_jid: rawGroup.id,
            instance_id: instanceId,
            subject: rawGroup.subject,
            owner_jid: rawGroup.owner,
            description: rawGroup.desc,
            creation_timestamp: rawGroup.creation ? new Date(rawGroup.creation * 1000) : undefined,
            is_locked: rawGroup.announce || false,
        };
    },
    
    mapMessageStatus(apiStatus: string): WhatsappMessageUpdate['status'] | null {
        const statusMap: { [key: string]: WhatsappMessageUpdate['status'] } = {
            'ERROR': 'error',
            'PENDING': 'pending',
            'SERVER_ACK': 'sent',
            'DELIVERY_ACK': 'delivered',
            'READ': 'read',
            'PLAYED': 'played'
        };
        return statusMap[apiStatus] || null;
    },

    // ... other mapping functions ...
};
