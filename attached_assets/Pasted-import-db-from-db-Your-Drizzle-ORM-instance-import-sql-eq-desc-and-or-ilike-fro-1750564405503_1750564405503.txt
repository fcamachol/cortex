import { db } from "./db"; // Your Drizzle ORM instance
import { sql, eq, desc, and, or, ilike } from "drizzle-orm";
import {
    // App Schema
    appUsers, workspaces, spaces, workspaceMembers,
    // WhatsApp Schema
    whatsappInstances, whatsappContacts, whatsappChats, whatsappMessages,
    whatsappGroups, whatsappGroupParticipants,
    // CRM Schema
    crmProjects, crmTasks, crmTaskChecklistItems,
    // Type Imports from your single source of truth schema file
    type AppUser, type InsertAppUser,
    type WhatsappInstance, type InsertWhatsappInstance,
    type WhatsappContact, type InsertWhatsappContact,
    type WhatsappChat, type InsertWhatsappChat,
    type WhatsappMessage, type InsertWhatsappMessage,
    type WhatsappGroup, type InsertWhatsappGroup,
    type WhatsappGroupParticipant, type InsertWhatsappGroupParticipant
} from "../shared/schema";

/**
 * @class DatabaseStorage
 * @description The "Warehouse Clerk" layer. Its only job is to execute SQL
 * queries against the database using a shared connection pool. It abstracts all
 * database interactions away from the rest of the application.
 */
class DatabaseStorage {

    // =========================================================================
    // APP SCHEMA METHODS
    // =========================================================================

    async getUserById(userId: string): Promise<AppUser | null> {
        const [user] = await db.select().from(appUsers).where(eq(appUsers.user_id, userId));
        return user || null;
    }

    async getUserByEmail(email: string): Promise<AppUser | null> {
        const [user] = await db.select().from(appUsers).where(eq(appUsers.email, email.toLowerCase()));
        return user || null;
    }
    
    async getSpacesForUser(userId: string): Promise<any[]> {
        const results = await db.select()
            .from(spaces)
            .leftJoin(workspaceMembers, eq(spaces.workspace_id, workspaceMembers.workspace_id))
            .where(or(
                eq(spaces.creator_user_id, userId),
                eq(workspaceMembers.user_id, userId)
            ))
            .groupBy(spaces.space_id)
            .orderBy(spaces.display_order);
            
        return results.map(r => r.spaces);
    }

    // =========================================================================
    // WHATSAPP SCHEMA METHODS
    // =========================================================================

    async getInstanceById(instanceId: string): Promise<WhatsappInstance | null> {
        const [instance] = await db.select().from(whatsappInstances).where(eq(whatsappInstances.instance_id, instanceId));
        return instance || null;
    }

    async getWhatsappInstances(userId: string): Promise<WhatsappInstance[]> {
        // This logic assumes client_id in whatsapp.instances is the user_id.
        // This might need adjustment based on your final workspace/user link.
        const results = await db.select().from(whatsappInstances)
            .where(eq(whatsappInstances.creator_user_id, userId));
        return results;
    }
    
    async getWhatsappConversations(userId: string): Promise<any[]> {
        const results = await db.select({
            chatId: whatsappChats.chat_id,
            instanceId: whatsappChats.instance_id,
            type: whatsappChats.type,
            unreadCount: whatsappChats.unread_count,
            lastMessageTimestamp: whatsappChats.last_message_timestamp,
            displayName: sql<string>`COALESCE(${whatsappGroups.subject}, ${whatsappContacts.push_name}, ${whatsappChats.chat_id})`,
            profilePictureUrl: whatsappContacts.profile_picture_url,
        })
        .from(whatsappChats)
        .innerJoin(whatsappInstances, eq(whatsappChats.instance_id, whatsappInstances.instance_id))
        .leftJoin(whatsappContacts, and(eq(whatsappChats.chat_id, whatsappContacts.jid), eq(whatsappChats.instance_id, whatsappContacts.instance_id)))
        .leftJoin(whatsappGroups, and(eq(whatsappChats.chat_id, whatsappGroups.group_jid), eq(whatsappChats.instance_id, whatsappGroups.instance_id)))
        .where(eq(whatsappInstances.creator_user_id, userId))
        .orderBy(desc(sql`COALESCE(${whatsappChats.last_message_timestamp}, ${whatsappChats.created_at})`));

        return results;
    }
    
    async getWhatsappContacts(userId: string): Promise<WhatsappContact[]> {
        const results = await db.select({ contact: whatsappContacts })
            .from(whatsappContacts)
            .innerJoin(whatsappInstances, eq(whatsappContacts.instance_id, whatsappInstances.instance_id))
            .where(and(
                eq(whatsappInstances.creator_user_id, userId),
                eq(whatsappContacts.is_me, false)
            ));
            
        return results.map(r => r.contact);
    }
    
    async getWhatsappGroups(instanceId: string): Promise<WhatsappGroup[]> {
        return await db.select().from(whatsappGroups).where(eq(whatsappGroups.instance_id, instanceId));
    }

    async upsertWhatsappContact(contact: InsertWhatsappContact): Promise<WhatsappContact> {
        const [result] = await db.insert(whatsappContacts)
            .values(contact)
            .onConflictDoUpdate({
                target: [whatsappContacts.jid, whatsappContacts.instance_id],
                set: {
                    push_name: contact.push_name,
                    profile_picture_url: contact.profile_picture_url,
                    last_updated_at: new Date()
                }
            })
            .returning();
        return result;
    }

    async upsertWhatsappChat(chat: InsertWhatsappChat): Promise<WhatsappChat> {
        const [result] = await db.insert(whatsappChats)
            .values(chat)
            .onConflictDoUpdate({
                target: [whatsappChats.chat_id, whatsappChats.instance_id],
                set: {
                    unread_count: chat.unread_count,
                    last_message_timestamp: chat.last_message_timestamp,
                    updated_at: new Date()
                }
            })
            .returning();
        return result;
    }
    
    async upsertWhatsappGroup(group: InsertWhatsappGroup): Promise<WhatsappGroup> {
        const [result] = await db.insert(whatsappGroups)
            .values(group)
            .onConflictDoUpdate({
                target: [whatsappGroups.group_jid, whatsappGroups.instance_id],
                set: {
                    subject: group.subject,
                    description: group.description,
                    owner_jid: group.owner_jid,
                    updated_at: new Date()
                }
            })
            .returning();
        return result;
    }

    async upsertWhatsappMessage(message: InsertWhatsappMessage): Promise<WhatsappMessage> {
        const [result] = await db.insert(whatsappMessages)
            .values(message)
            .onConflictDoUpdate({
                target: [whatsappMessages.message_id, whatsappMessages.instance_id],
                set: {
                    content: message.content,
                    is_edited: message.is_edited,
                    last_edited_at: message.last_edited_at,
                }
            })
            .returning();
        return result;
    }
    
    async createGroupPlaceholderIfNeeded(groupJid: string, instanceId: string): Promise<void> {
        await db.insert(whatsappGroups)
            .values({ group_jid: groupJid, instance_id: instanceId, subject: 'New Group' })
            .onConflictDoNothing();
    }

    // =========================================================================
    // CRM SCHEMA METHODS
    // =========================================================================

    async getProjects(spaceId: number): Promise<any[]> {
        return await db.select().from(crmProjects).where(eq(crmProjects.space_id, spaceId));
    }

    async getChecklistItems(taskId: number): Promise<any[]> {
        return await db.select().from(crmTaskChecklistItems).where(eq(crmTaskChecklistItems.task_id, taskId));
    }
    
    // ... Implement other CRM functions as needed
}

export const storage = new DatabaseStorage();
