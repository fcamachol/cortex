import { Request, Response } from 'express';
import { storage } from './storage'; // Your database access layer
import { SseManager } from './sse-manager'; // Your real-time notification manager
import { ActionService } from './action-service'; // Your business logic engine
import {
    type WhatsappMessages,
    type WhatsappContacts,
    type WhatsappChats,
    type WhatsappGroups,
    type WhatsappCallLogs,
    type WhatsappMessageReactions
} from '@shared/schema';

/**
 * @class WebhookApiAdapter
 * @description The "Translator" layer. Its only job is to take raw API payloads,
 * map them into clean internal data objects, and then command the storage layer
 * in the correct order to prevent data integrity errors.
 */
export const WebhookApiAdapter = {

    /**
     * Main entry point for all webhook events.
     */
    async processIncomingEvent(instanceId: string, event: any): Promise<void> {
        const { event: eventType, data, sender } = event;
        console.log(`üì® [${instanceId}] Translating event: ${eventType}`);

        switch (eventType) {
            case 'messages.upsert':
                const potentialMessage = Array.isArray(data.messages) ? data.messages[0] : data;
                if (potentialMessage?.message?.reactionMessage) {
                    await this.handleReaction(instanceId, potentialMessage, sender);
                } else {
                    await this.handleMessageUpsert(instanceId, data);
                }
                break;
            case 'messages.update':
                if (data.updates && data.updates[0]?.message?.reactionMessage) {
                     await this.handleReaction(instanceId, data.updates[0], sender);
                } else {
                    await this.handleMessageUpdate(instanceId, data);
                }
                break;
            case 'contacts.upsert':
            case 'contacts.update':
                await this.handleContactsUpsert(instanceId, data);
                break;
            case 'chats.upsert':
            case 'chats.update':
                await this.handleChatsUpsert(instanceId, data);
                break;
            case 'groups.upsert':
            case 'groups.update':
                 await this.handleGroupsUpsert(instanceId, data);
                 break;
            case 'group.participants.update':
                 await this.handleGroupParticipantsUpdate(instanceId, data);
                 break;
            case 'call':
                await this.handleCall(instanceId, data);
                break;
            default:
                console.log(`- Unhandled event type in adapter: ${eventType}`);
        }
    },

    /**
     * Dedicated handler for reaction events.
     */
    async handleReaction(instanceId: string, rawReaction: any, sender?: string): Promise<void> {
        try {
            const cleanReaction = this.mapApiPayloadToWhatsappReaction(rawReaction, instanceId, sender);
            if (!cleanReaction) {
                console.warn(`[${instanceId}] Could not process invalid reaction payload.`);
                return;
            }

            await storage.upsertWhatsappReaction(cleanReaction);
            console.log(`‚úÖ [${instanceId}] Reaction stored: ${cleanReaction.reaction_emoji} on ${cleanReaction.message_id}`);
            
            SseManager.notifyClientsOfNewReaction(cleanReaction);
            
            ActionService.processReaction(cleanReaction);

        } catch (error) {
            console.error(`‚ùå Error processing reaction:`, error);
        }
    },

    /**
     * Handles new messages with a robust, sequential process.
     */
    async handleMessageUpsert(instanceId: string, data: any, sender?: string): Promise<void> {
        const messages = Array.isArray(data.messages) ? data.messages : [data];
        if (!messages[0]?.key) {
            console.warn(`[${instanceId}] Invalid messages.upsert payload:`, data);
            return;
        }

        for (const rawMessage of messages) {
            try {
                const cleanMessage = await this.mapApiPayloadToWhatsappMessage(rawMessage, instanceId);
                if (!cleanMessage) continue;

                await this.ensureDependenciesForMessage(cleanMessage, rawMessage);
                
                const storedMessage = await storage.upsertWhatsappMessage(cleanMessage);
                console.log(`‚úÖ [${instanceId}] Message stored: ${storedMessage.message_id}`);
                
                SseManager.notifyClientsOfNewMessage(storedMessage);
                ActionService.processNewMessage(storedMessage);

            } catch (error) {
                console.error(`‚ùå Error processing message upsert for ${rawMessage.key?.id}:`, error);
            }
        }
    },
    
    // ... other handlers remain unchanged ...
    async handleMessageUpdate(instanceId: string, data: any): Promise<void> { /* ... */ },
    async handleContactsUpsert(instanceId: string, data: any): Promise<void> { /* ... */ },
    async handleChatsUpsert(instanceId: string, data: any): Promise<void> { /* ... */ },
    async handleGroupsUpsert(instanceId: string, data: any[]): Promise<void> { /* ... */ },
    async handleGroupParticipantsUpdate(instanceId: string, data: any): Promise<void> { /* ... */ },
    async handleCall(instanceId: string, data: any[]): Promise<void> { /* ... */ },
    async ensureDependenciesForMessage(cleanMessage: WhatsappMessages, rawMessage: any): Promise<void> { /* ... */ },
    
    // --- Data Mapping Functions ---

    mapApiPayloadToWhatsappReaction(rawReaction: any, instanceId: string, sender?: string): Omit<WhatsappMessageReactions, 'reaction_id'> | null {
        const reactionMsg = rawReaction.message?.reactionMessage;
        if (!reactionMsg?.key?.id) return null;
        
        const reactorJid = rawReaction.key?.participant || sender || rawReaction.key?.remoteJid;
        
        // --- FIX: Ensure timestamp is always a valid Date object ---
        const timestampMs = reactionMsg.senderTimestampMs;
        const validTimestamp = timestampMs && typeof timestampMs === 'number' ? new Date(timestampMs) : new Date();

        return {
            message_id: reactionMsg.key.id,
            instance_id: instanceId,
            reactor_jid: reactorJid,
            reaction_emoji: reactionMsg.text || '',
            from_me: rawReaction.key.fromMe || false,
            timestamp: validTimestamp
        };
    },
    
    async mapApiPayloadToWhatsappMessage(rawMessage: any, instanceId: string): Promise<Omit<WhatsappMessages, 'created_at'>> {
        // ... implementation is correct and unchanged ...
        return null;
    },

    async mapApiPayloadToWhatsappContact(rawContact: any, instanceId: string): Promise<Omit<WhatsappContacts, 'first_seen_at' | 'last_updated_at'> | null> {
        // ... implementation is correct and unchanged ...
        return null;
    },
    
    mapApiPayloadToWhatsappChat(rawChat: any, instanceId: string): Omit<WhatsappChats, 'created_at' | 'updated_at'> | null {
        // ... implementation is correct and unchanged ...
        return null;
    },

    mapApiPayloadToWhatsappGroup(rawGroup: any, instanceId: string): Omit<WhatsappGroups, 'updated_at'> | null {
        // ... implementation is correct and unchanged ...
        return null;
    },
    
    mapApiPayloadToWhatsappCallLog(rawCall: any, instanceId: string): Omit<WhatsappCallLogs, 'created_at' | 'updated_at'> | null {
        // ... implementation is correct and unchanged ...
        return null;
    },
    
    mapMessageStatus(apiStatus: string): any | null {
        // ... implementation is correct and unchanged ...
        return null;
    },

    extractMessageContent(message: any): string {
        const msg = message.message;
        if (!msg) return '';
        return msg.conversation || msg.extendedTextMessage?.text || msg.imageMessage?.caption || msg.videoMessage?.caption || '';
    }
};
