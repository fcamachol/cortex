import { pgTable, pgSchema, text, boolean, timestamp, uuid, integer, jsonb, varchar, serial, numeric, index, primaryKey, uniqueIndex, pgEnum, unique, check } from "drizzle-orm/pg-core";
import { relations, sql } from "drizzle-orm";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

// =====================================================
// CORTEX FOUNDATION SCHEMA
// Core foundation tables for user management, workspaces, and base architecture
// =====================================================

// Create cortex_foundation schema
export const cortexFoundationSchema = pgSchema("cortex_foundation");

// =====================================================
// FOUNDATION ENUMS
// =====================================================

export const planTypeEnum = cortexFoundationSchema.enum("plan_type", [
  "free", "starter", "professional", "enterprise"
]);

export const spaceTypeEnum = cortexFoundationSchema.enum("space_type", [
  "folder", "workspace", "project", "team", "personal", "archive", "template"
]);

export const privacyEnum = cortexFoundationSchema.enum("privacy", [
  "private", "public", "restricted", "shared"
]);

export const relationshipTypeEnum = cortexFoundationSchema.enum("relationship_type", [
  // Universal relationships
  "related_to", "belongs_to", "contains", "depends_on", "blocks", "references",
  // Person relationships
  "married_to", "parent_of", "child_of", "sibling_of", "friend_of", "colleague_of",
  "manager_of", "reports_to", "works_for", "founded", "consultant_for",
  // Business relationships
  "subsidiary_of", "owns", "client_of", "vendor_of", "partner_with", "competitor_of",
  // Project relationships
  "manages", "sponsors", "assigned_to", "predecessor_of", "successor_of",
  // Content relationships
  "created_by", "mentions", "about", "taken_during", "summary_of", "tagged_with"
]);

// =====================================================
// CORE FOUNDATION TABLES
// =====================================================

// Foundation Users - Core user management
export const cortexFoundationUsers = cortexFoundationSchema.table("users", {
  id: varchar("id", { length: 50 }).primaryKey(), // cu_ prefixed UUID (generated by trigger)
  email: varchar("email", { length: 255 }).notNull().unique(),
  passwordHash: varchar("password_hash", { length: 255 }).notNull(),
  fullName: varchar("full_name", { length: 255 }).notNull(),
  firstName: varchar("first_name", { length: 100 }),
  lastName: varchar("last_name", { length: 100 }),
  profilePictureUrl: varchar("profile_picture_url", { length: 500 }),
  timezone: varchar("timezone", { length: 50 }).default("UTC"),
  locale: varchar("locale", { length: 10 }).default("en_US"),
  isEmailVerified: boolean("is_email_verified").default(false),
  emailVerificationToken: varchar("email_verification_token", { length: 255 }),
  emailVerificationExpires: timestamp("email_verification_expires"),
  passwordResetToken: varchar("password_reset_token", { length: 255 }),
  passwordResetExpires: timestamp("password_reset_expires"),
  lastLoginAt: timestamp("last_login_at"),
  loginCount: integer("login_count").default(0),
  failedLoginAttempts: integer("failed_login_attempts").default(0),
  lockedUntil: timestamp("locked_until"),
  isActive: boolean("is_active").default(true),
  isAdmin: boolean("is_admin").default(false),
  notificationPreferences: jsonb("notification_preferences").$type<Record<string, any>>().default({}),
  uiPreferences: jsonb("ui_preferences").$type<Record<string, any>>().default({}),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
  lastSeenAt: timestamp("last_seen_at").defaultNow(),
}, (table) => ({
  emailIdx: index("cortex_foundation_users_email_idx").on(table.email),
  activeIdx: index("cortex_foundation_users_active_idx").on(table.isActive),
  lastSeenIdx: index("cortex_foundation_users_last_seen_idx").on(table.lastSeenAt),
}));

// Foundation Workspaces - Multi-tenant workspace management
export const cortexFoundationWorkspaces = cortexFoundationSchema.table("workspaces", {
  id: uuid("id").primaryKey().defaultRandom(),
  name: varchar("name", { length: 255 }).notNull(),
  slug: varchar("slug", { length: 100 }).notNull().unique(),
  description: text("description"),
  logoUrl: varchar("logo_url", { length: 500 }),
  primaryColor: varchar("primary_color", { length: 7 }), // Hex color
  domain: varchar("domain", { length: 255 }),
  ownerUserId: varchar("owner_user_id", { length: 50 }).notNull().references(() => cortexFoundationUsers.id),
  planType: planTypeEnum("plan_type").default("free"),
  maxUsers: integer("max_users").default(5),
  maxStorageGb: integer("max_storage_gb").default(1),
  isActive: boolean("is_active").default(true),
  trialEndsAt: timestamp("trial_ends_at"),
  settings: jsonb("settings").$type<Record<string, any>>().default({}),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
}, (table) => ({
  slugIdx: unique("cortex_foundation_workspaces_slug_unique").on(table.slug),
  ownerIdx: index("cortex_foundation_workspaces_owner_idx").on(table.ownerUserId),
  activeIdx: index("cortex_foundation_workspaces_active_idx").on(table.isActive),
}));

// Foundation Entity Relationships - Universal relationship system
export const cortexFoundationEntityRelationships = cortexFoundationSchema.table("entity_relationships", {
  id: uuid("id").primaryKey().defaultRandom(),
  fromEntityId: varchar("from_entity_id", { length: 50 }).notNull(),
  toEntityId: varchar("to_entity_id", { length: 50 }), // Nullable for content relationships
  contentType: varchar("content_type", { length: 50 }), // For content relationships
  contentId: varchar("content_id", { length: 50 }), // For content relationships
  relationshipType: relationshipTypeEnum("relationship_type").notNull(),
  isBidirectional: boolean("is_bidirectional").default(false),
  weight: numeric("weight", { precision: 3, scale: 2 }).default("1.0"), // 0.0 to 1.0
  metadata: jsonb("metadata").$type<Record<string, any>>().default({}),
  createdAt: timestamp("created_at").defaultNow(),
  createdBy: varchar("created_by", { length: 50 }),
  isActive: boolean("is_active").default(true),
}, (table) => ({
  fromEntityIdx: index("cortex_foundation_entity_relationships_from_idx").on(table.fromEntityId),
  toEntityIdx: index("cortex_foundation_entity_relationships_to_idx").on(table.toEntityId),
  contentIdx: index("cortex_foundation_entity_relationships_content_idx").on(table.contentType, table.contentId),
  relationshipTypeIdx: index("cortex_foundation_entity_relationships_type_idx").on(table.relationshipType),
  activeIdx: index("cortex_foundation_entity_relationships_active_idx").on(table.isActive),
  // Constraint: Either entity-to-entity OR entity-to-content, not both
  entityOrContentCheck: check("entity_or_content_check", sql`
    (${table.toEntityId} IS NOT NULL AND ${table.contentType} IS NULL AND ${table.contentId} IS NULL) OR
    (${table.toEntityId} IS NULL AND ${table.contentType} IS NOT NULL AND ${table.contentId} IS NOT NULL)
  `),
  // Constraint: No self-referencing entity relationships
  noSelfRefCheck: check("no_self_ref_check", sql`
    ${table.fromEntityId} != ${table.toEntityId} OR ${table.toEntityId} IS NULL
  `),
  // Constraint: Weight must be between 0.0 and 1.0
  weightRangeCheck: check("weight_range_check", sql`
    ${table.weight} >= 0.0 AND ${table.weight} <= 1.0
  `),
}));

// Foundation Spaces - Hierarchical space management (Google Drive-like)
export const cortexFoundationSpaces = cortexFoundationSchema.table("spaces", {
  id: varchar("id", { length: 50 }).primaryKey(), // cs_ prefixed UUID (generated by trigger)
  name: varchar("name", { length: 255 }).notNull(),
  description: text("description"),
  parentSpaceId: varchar("parent_space_id", { length: 50 }), // Self-referencing FK
  spaceType: spaceTypeEnum("space_type").default("folder"),
  category: varchar("category", { length: 100 }),
  privacy: privacyEnum("privacy").default("private"),
  ownerUserId: varchar("owner_user_id", { length: 50 }).notNull(),
  color: varchar("color", { length: 7 }), // Hex color
  icon: varchar("icon", { length: 50 }),
  coverImageUrl: varchar("cover_image_url", { length: 500 }),
  isStarred: boolean("is_starred").default(false),
  isPinned: boolean("is_pinned").default(false),
  isArchived: boolean("is_archived").default(false),
  lastAccessedAt: timestamp("last_accessed_at").defaultNow(),
  sortOrder: integer("sort_order").default(0),
  level: integer("level").default(0), // Hierarchy depth
  path: text("path"), // Full hierarchical path
  templateId: varchar("template_id", { length: 50 }),
  isTemplate: boolean("is_template").default(false),
  customFields: jsonb("custom_fields").$type<Record<string, any>>().default({}),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
}, (table) => ({
  nameIdx: index("cortex_foundation_spaces_name_idx").on(table.name),
  parentIdx: index("cortex_foundation_spaces_parent_idx").on(table.parentSpaceId),
  ownerIdx: index("cortex_foundation_spaces_owner_idx").on(table.ownerUserId),
  typeIdx: index("cortex_foundation_spaces_type_idx").on(table.spaceType),
  categoryIdx: index("cortex_foundation_spaces_category_idx").on(table.category),
  levelIdx: index("cortex_foundation_spaces_level_idx").on(table.level),
  pathIdx: index("cortex_foundation_spaces_path_idx").on(table.path),
  sortOrderIdx: index("cortex_foundation_spaces_sort_order_idx").on(table.sortOrder),
  // Constraint: No self-referencing spaces
  noSelfParentCheck: check("no_self_parent_check", sql`
    ${table.id} != ${table.parentSpaceId}
  `),
}));

// Foundation Workspace Members - User-workspace relationships
export const cortexFoundationWorkspaceMembers = cortexFoundationSchema.table("workspace_members", {
  workspaceId: uuid("workspace_id").notNull().references(() => cortexFoundationWorkspaces.id, { onDelete: "cascade" }),
  userId: varchar("user_id", { length: 50 }).notNull().references(() => cortexFoundationUsers.id, { onDelete: "cascade" }),
  role: varchar("role", { length: 50 }).default("member"), // owner, admin, member, viewer
  permissions: jsonb("permissions").$type<Record<string, boolean>>().default({}),
  invitedBy: varchar("invited_by", { length: 50 }),
  invitedAt: timestamp("invited_at").defaultNow(),
  joinedAt: timestamp("joined_at"),
  lastActiveAt: timestamp("last_active_at"),
  isActive: boolean("is_active").default(true),
}, (table) => ({
  pk: primaryKey({ columns: [table.workspaceId, table.userId] }),
  workspaceIdx: index("cortex_foundation_workspace_members_workspace_idx").on(table.workspaceId),
  userIdx: index("cortex_foundation_workspace_members_user_idx").on(table.userId),
  roleIdx: index("cortex_foundation_workspace_members_role_idx").on(table.role),
  activeIdx: index("cortex_foundation_workspace_members_active_idx").on(table.isActive),
}));

// Foundation Space Members - User-space permissions
export const cortexFoundationSpaceMembers = cortexFoundationSchema.table("space_members", {
  spaceId: varchar("space_id", { length: 50 }).notNull().references(() => cortexFoundationSpaces.id, { onDelete: "cascade" }),
  userId: varchar("user_id", { length: 50 }).notNull().references(() => cortexFoundationUsers.id, { onDelete: "cascade" }),
  role: varchar("role", { length: 50 }).default("viewer"), // owner, editor, commenter, viewer
  permissions: jsonb("permissions").$type<{
    canRead: boolean;
    canWrite: boolean;
    canShare: boolean;
    canDelete: boolean;
    canManageMembers: boolean;
  }>().default({
    canRead: true,
    canWrite: false,
    canShare: false,
    canDelete: false,
    canManageMembers: false
  }),
  invitedBy: varchar("invited_by", { length: 50 }),
  joinedAt: timestamp("joined_at").defaultNow(),
  lastAccessedAt: timestamp("last_accessed_at"),
  isActive: boolean("is_active").default(true),
}, (table) => ({
  pk: primaryKey({ columns: [table.spaceId, table.userId] }),
  spaceIdx: index("cortex_foundation_space_members_space_idx").on(table.spaceId),
  userIdx: index("cortex_foundation_space_members_user_idx").on(table.userId),
  roleIdx: index("cortex_foundation_space_members_role_idx").on(table.role),
  activeIdx: index("cortex_foundation_space_members_active_idx").on(table.isActive),
}));

// Foundation Activity Log - Universal activity tracking
export const cortexFoundationActivityLog = cortexFoundationSchema.table("activity_log", {
  id: uuid("id").primaryKey().defaultRandom(),
  workspaceId: uuid("workspace_id"), // Optional workspace context
  userId: varchar("user_id", { length: 50 }).notNull().references(() => cortexFoundationUsers.id),
  entityType: varchar("entity_type", { length: 50 }), // cp, cc, cg, etc.
  entityId: varchar("entity_id", { length: 50 }), // Optional entity context
  action: varchar("action", { length: 100 }).notNull(), // created, updated, deleted, shared, etc.
  description: text("description"),
  changes: jsonb("changes").$type<Record<string, any>>(), // What changed
  ipAddress: varchar("ip_address", { length: 45 }),
  userAgent: text("user_agent"),
  sessionId: varchar("session_id", { length: 255 }),
  createdAt: timestamp("created_at").defaultNow(),
}, (table) => ({
  workspaceIdx: index("cortex_foundation_activity_log_workspace_idx").on(table.workspaceId),
  userIdx: index("cortex_foundation_activity_log_user_idx").on(table.userId),
  entityIdx: index("cortex_foundation_activity_log_entity_idx").on(table.entityType, table.entityId),
  actionIdx: index("cortex_foundation_activity_log_action_idx").on(table.action),
  createdAtIdx: index("cortex_foundation_activity_log_created_at_idx").on(table.createdAt),
}));

// Foundation Tags - Universal tagging system
export const cortexFoundationTags = cortexFoundationSchema.table("tags", {
  id: uuid("id").primaryKey().defaultRandom(),
  name: varchar("name", { length: 100 }).notNull(),
  description: text("description"),
  color: varchar("color", { length: 7 }), // Hex color
  icon: varchar("icon", { length: 50 }),
  category: varchar("category", { length: 100 }),
  workspaceId: uuid("workspace_id"), // Optional workspace scoping
  createdBy: varchar("created_by", { length: 50 }).notNull().references(() => cortexFoundationUsers.id),
  usageCount: integer("usage_count").default(0),
  isSystem: boolean("is_system").default(false),
  isPublic: boolean("is_public").default(false),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
}, (table) => ({
  nameIdx: index("cortex_foundation_tags_name_idx").on(table.name),
  workspaceNameIdx: unique("cortex_foundation_tags_workspace_name_unique").on(table.workspaceId, table.name),
  categoryIdx: index("cortex_foundation_tags_category_idx").on(table.category),
  workspaceIdx: index("cortex_foundation_tags_workspace_idx").on(table.workspaceId),
  createdByIdx: index("cortex_foundation_tags_created_by_idx").on(table.createdBy),
  usageIdx: index("cortex_foundation_tags_usage_idx").on(table.usageCount),
  systemIdx: index("cortex_foundation_tags_system_idx").on(table.isSystem),
}));

// =====================================================
// FOUNDATION RELATIONS
// =====================================================

export const cortexFoundationUsersRelations = relations(cortexFoundationUsers, ({ many }) => ({
  ownedWorkspaces: many(cortexFoundationWorkspaces),
  workspaceMemberships: many(cortexFoundationWorkspaceMembers),
  spaceMemberships: many(cortexFoundationSpaceMembers),
  activityLogs: many(cortexFoundationActivityLog),
  createdTags: many(cortexFoundationTags),
}));

export const cortexFoundationWorkspacesRelations = relations(cortexFoundationWorkspaces, ({ one, many }) => ({
  owner: one(cortexFoundationUsers, {
    fields: [cortexFoundationWorkspaces.ownerUserId],
    references: [cortexFoundationUsers.id],
  }),
  members: many(cortexFoundationWorkspaceMembers),
  tags: many(cortexFoundationTags),
}));

export const cortexFoundationWorkspaceMembersRelations = relations(cortexFoundationWorkspaceMembers, ({ one }) => ({
  workspace: one(cortexFoundationWorkspaces, {
    fields: [cortexFoundationWorkspaceMembers.workspaceId],
    references: [cortexFoundationWorkspaces.id],
  }),
  user: one(cortexFoundationUsers, {
    fields: [cortexFoundationWorkspaceMembers.userId],
    references: [cortexFoundationUsers.id],
  }),
}));

export const cortexFoundationSpacesRelations = relations(cortexFoundationSpaces, ({ one, many }) => ({
  parentSpace: one(cortexFoundationSpaces, {
    fields: [cortexFoundationSpaces.parentSpaceId],
    references: [cortexFoundationSpaces.id],
    relationName: "parent_child_spaces"
  }),
  childSpaces: many(cortexFoundationSpaces, {
    relationName: "parent_child_spaces"
  }),
  members: many(cortexFoundationSpaceMembers),
}));

export const cortexFoundationSpaceMembersRelations = relations(cortexFoundationSpaceMembers, ({ one }) => ({
  space: one(cortexFoundationSpaces, {
    fields: [cortexFoundationSpaceMembers.spaceId],
    references: [cortexFoundationSpaces.id],
  }),
  user: one(cortexFoundationUsers, {
    fields: [cortexFoundationSpaceMembers.userId],
    references: [cortexFoundationUsers.id],
  }),
}));

export const cortexFoundationActivityLogRelations = relations(cortexFoundationActivityLog, ({ one }) => ({
  user: one(cortexFoundationUsers, {
    fields: [cortexFoundationActivityLog.userId],
    references: [cortexFoundationUsers.id],
  }),
  workspace: one(cortexFoundationWorkspaces, {
    fields: [cortexFoundationActivityLog.workspaceId],
    references: [cortexFoundationWorkspaces.id],
  }),
}));

export const cortexFoundationTagsRelations = relations(cortexFoundationTags, ({ one }) => ({
  creator: one(cortexFoundationUsers, {
    fields: [cortexFoundationTags.createdBy],
    references: [cortexFoundationUsers.id],
  }),
  workspace: one(cortexFoundationWorkspaces, {
    fields: [cortexFoundationTags.workspaceId],
    references: [cortexFoundationWorkspaces.id],
  }),
}));

// =====================================================
// INSERT SCHEMAS (Zod validation)
// =====================================================

export const insertCortexFoundationUserSchema = createInsertSchema(cortexFoundationUsers).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
  lastSeenAt: true,
});

export const insertCortexFoundationWorkspaceSchema = createInsertSchema(cortexFoundationWorkspaces).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertCortexFoundationEntityRelationshipSchema = createInsertSchema(cortexFoundationEntityRelationships).omit({
  id: true,
  createdAt: true,
});

export const insertCortexFoundationSpaceSchema = createInsertSchema(cortexFoundationSpaces).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
  lastAccessedAt: true,
});

export const insertCortexFoundationWorkspaceMemberSchema = createInsertSchema(cortexFoundationWorkspaceMembers).omit({
  invitedAt: true,
});

export const insertCortexFoundationSpaceMemberSchema = createInsertSchema(cortexFoundationSpaceMembers).omit({
  joinedAt: true,
});

export const insertCortexFoundationActivityLogSchema = createInsertSchema(cortexFoundationActivityLog).omit({
  id: true,
  createdAt: true,
});

export const insertCortexFoundationTagSchema = createInsertSchema(cortexFoundationTags).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

// =====================================================
// TYPE EXPORTS
// =====================================================

export type CortexFoundationUser = typeof cortexFoundationUsers.$inferSelect;
export type InsertCortexFoundationUser = z.infer<typeof insertCortexFoundationUserSchema>;

export type CortexFoundationWorkspace = typeof cortexFoundationWorkspaces.$inferSelect;
export type InsertCortexFoundationWorkspace = z.infer<typeof insertCortexFoundationWorkspaceSchema>;

export type CortexFoundationEntityRelationship = typeof cortexFoundationEntityRelationships.$inferSelect;
export type InsertCortexFoundationEntityRelationship = z.infer<typeof insertCortexFoundationEntityRelationshipSchema>;

export type CortexFoundationSpace = typeof cortexFoundationSpaces.$inferSelect;
export type InsertCortexFoundationSpace = z.infer<typeof insertCortexFoundationSpaceSchema>;

export type CortexFoundationWorkspaceMember = typeof cortexFoundationWorkspaceMembers.$inferSelect;
export type InsertCortexFoundationWorkspaceMember = z.infer<typeof insertCortexFoundationWorkspaceMemberSchema>;

export type CortexFoundationSpaceMember = typeof cortexFoundationSpaceMembers.$inferSelect;
export type InsertCortexFoundationSpaceMember = z.infer<typeof insertCortexFoundationSpaceMemberSchema>;

export type CortexFoundationActivityLog = typeof cortexFoundationActivityLog.$inferSelect;
export type InsertCortexFoundationActivityLog = z.infer<typeof insertCortexFoundationActivityLogSchema>;

export type CortexFoundationTag = typeof cortexFoundationTags.$inferSelect;
export type InsertCortexFoundationTag = z.infer<typeof insertCortexFoundationTagSchema>;